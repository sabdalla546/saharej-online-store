// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
enum UserRole {
  SUPERADMIN
  ADMIN
  USER
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole        @default(USER)
  accounts      Account[]
  isTwoFactorEnabbled Boolean   @default(false)
  twoFactowConfirmation TwoFactowConfirmation?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model Store {
   id         String   @id @default(auto()) @map("_id") @db.ObjectId
   name       String
   description String
   imageUrl    String?
   userId     String  @db.ObjectId
   billboards Billboard[]
   categories Category[]
   sizes      Size[]
   colors     Color[]
   products   Product[]
   orders     Order[]
   createdAt  DateTime  @default(now())
   updatedAt  DateTime  @updatedAt
}
model Billboard {
   id            String   @id @default(auto()) @map("_id") @db.ObjectId
   storeId       String   @db.ObjectId
   store         Store    @relation(fields: [storeId],references: [id])
   label         String
   imageUrl      String
   categories    Category[]
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
   
}
model Category {
 id            String   @id @default(auto()) @map("_id") @db.ObjectId
 storeId       String   @db.ObjectId
 store         Store    @relation(fields: [storeId],references: [id])
 billboardId   String   @db.ObjectId
 billboard     Billboard    @relation(fields: [billboardId],references: [id])
 name          String
 products      Product[]
 isFeatured    Boolean
 createdAt     DateTime  @default(now())
 updatedAt     DateTime  @updatedAt
}
model MainCategory {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  subCategory   SubCategories[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}
model SubCategories {
   id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  mainCategory  MainCategory @relation(fields: [id],references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}
model Size {
 id            String   @id @default(auto()) @map("_id") @db.ObjectId
 storeId       String   @db.ObjectId
 store         Store    @relation(fields: [storeId],references: [id])
 products      Product[]
 name          String
 value         String
 createdAt     DateTime  @default(now())
 updatedAt     DateTime  @updatedAt
}
model Color {
 id            String   @id @default(auto()) @map("_id") @db.ObjectId
 storeId       String   @db.ObjectId
 store         Store    @relation(fields: [storeId],references: [id])
 products      Product[]
 name          String
 value         String
 createdAt     DateTime  @default(now())
 updatedAt     DateTime  @updatedAt
}
model Product {
 id            String    @id @default(auto()) @map("_id") @db.ObjectId
 storeId        String   @db.ObjectId
 store          Store    @relation(fields: [storeId],references: [id])
 categoryId     String   @db.ObjectId
 category       Category @relation(fields: [categoryId],references: [id])
 name           String
 description    String
 price          String
 isFeatured     Boolean
 isArchived     Boolean
 sizeId         String    @db.ObjectId
 size           Size      @relation(fields: [sizeId],references: [id])
 colorId        String    @db.ObjectId
 color          Color     @relation(fields: [colorId],references: [id])
 images         Image[]
 orderItems     OrderItem[]
 createdAt      DateTime   @default(now())
 updatedAt      DateTime   @updatedAt
}
model Image {
   id            String    @id @default(auto()) @map("_id") @db.ObjectId
   productId     String    @db.ObjectId
   product       Product   @relation(fields: [productId],references: [id],onDelete: Cascade)
   url           String
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
}
model OrderItem {
   id             String    @id @default(auto()) @map("_id") @db.ObjectId
   orderId        String    @db.ObjectId
   order          Order     @relation(fields: [orderId] , references: [id])
   productId      String    @db.ObjectId
   product        Product   @relation(fields: [productId],references: [id])

}
model Order {
   id             String      @id @default(auto()) @map("_id") @db.ObjectId
   storeId        String      @db.ObjectId
   store          Store       @relation(fields: [storeId],references: [id])
   orderItems     OrderItem[]
   isPaid         Boolean     @default(false)
   address        String      @default("")
   phone          String      @default("")
   createdAt      DateTime    @default(now())
   updatedAt      DateTime    @updatedAt
}
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  email      String
  token      String   @unique
  expires    DateTime
 
  @@unique([email, token])
}
model PasswordRrsetToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  email      String
  token      String   @unique
  expires    DateTime
 
  @@unique([email, token])
}
model TwoFactowToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  email      String
  token      String   @unique
  expires    DateTime
 
  @@unique([email, token])
}
model TwoFactowConfirmation {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userid      String   @db.ObjectId
  user        User     @relation(fields: [userid], references: [id],onDelete: Cascade)
  expires    DateTime?
 
  @@unique([userid])
}